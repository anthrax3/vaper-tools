#!/usr/bin/env perl
use strict;
use warnings;

our $VERSION = '0.01';

use FindBin;
use lib "$FindBin::RealBin/../lib";
use lib "$FindBin::RealBin/../local/lib/perl5";

use App::JuiceCalc::Simple;
use App::JuiceCalc::EJMUParser;
use List::AllUtils qw( first );

=pod

=encoding utf8

=head1 NAME

ejmu - read a recipe from an 'eJuice Me Up' .rec file, then act like L<jcalc>

=head1 VERSION

version 0.01

=cut

use Getopt::Long::Descriptive;
use Pod::Usage;
my ($opt, $usage) = describe_options(
  "%c %o",
  [ 'name|n=s',   "the flavor name (default: guessed from filename)" ],
  [ 'flavor|f=s', "the EJMU flavor recipe file to mix" ],
  [ 'base|b=s',   "the base file to mix" ],
  [ 'nic=s',      "base override" ],
  [ 'fill|r=s',       "fill override" ],
  [ 'size|s=i',   "the amount to mix" ],
  [ 'emitter|e=s', "the emitter to use" ],
  [],
  [ 'nosanitize', "don't try and cleanup the recipe" ],
  [ 'list-emitters', "list the available emitters and exit" ],
  [ 'help|h',     "print usage and exit" ],
  [ 'man',        "print the manual page and exit" ],
  { getopt_conf => [ 'bundling_override' ] }
);
#use Data::Dump; dd [ opt => \%{ $opt } ];
print($usage->text), exit if $opt->{help};
pod2usage( -verbose => 2 ) if $opt->{man};

if ($opt->{list_formatters}) {
  my $info = list_emitters;
  for my $f (sort keys %$info) {
    print "\n";
    print "$info->{$f}{name}:\n";
    print "\t$info->{$f}{summary}\n" if $info->{$f}{summary};
    print "\t$info->{$f}{description}" if $info->{$f}{description};
    print "\n";
  }
  exit;
}

=head1 SYNOPSIS

    ejmu [-bfhs] [long options...]
      -n --name           the flavor name (default: guessed from filename)
      -f --flavor         the EJMU flavor recipe file to mix
      -b --base           the base file to mix
      --nic               base override
      -r --fill           fill override
      -s --size           the amount to mix
      -e --emitter        the emitter to use

      --nosanitize        don't try and cleanup the recipe
      --list-emitters     list the available emitters and exit
      -h --help           print usage and exit
      --man               print the manual page and exit

    ejmu -f 'examples/Fuzzy Custard.rec' --size 10

    .-----------------------------------------------.
    |      Fuzzy Custard 13 mg/ml (70/30 PG/VG)     |
    +--------------------------------+------+-------+
    | Flavor                         |   ml | Total |
    +--------------------------------+------+-------+
    | PG                             | 4.65 |  4.65 |
    +--------------------------------+------+-------+
    | VG                             | 2.35 |  7.00 |
    +--------------------------------+------+-------+
    | 100 mg/ml Nicotine 50/50 PG/VG | 1.30 |  8.30 |
    +--------------------------------+------+-------+
    | Vanilla Custard (TFA) PG       | 1.30 |  9.60 |
    +--------------------------------+------+-------+
    | Juicy Peach (TFA) PG           | 0.30 |  9.90 |
    +--------------------------------+------+-------+
    | Butterscotch (TFA) PG          | 0.10 | 10.00 |
    '--------------------------------+------+-------'

=head1 OPTIONS AND ARGUMENTS

See: L<jcalc>

=cut

if ($opt->{flavor}) {
  die "Can't find EJMU recipe file: $opt->{flavor}\n" unless -f $opt->{flavor};
}
else {
  die "No EJMU recipe file given\n";
}

my $e = App::JuiceCalc::EJMUParser->new_from_file(
  file => $opt->{flavor},
  ($opt->{name} ? ( name => $opt->{name} ) : ( autoname => 1 )),
);
$e = $e->sanitize unless $opt->{nosanitize};

name $e->name;
my $f = $e->flavors;
for my $fi (0..6) {
  flav @{ $f->{$fi} } if exists $f->{$fi};
}

nic $e->target->{mg}, $e->misc->{base}{mg},
  vg => $e->misc->{base}{vg}/100, pg => $e->misc->{base}{pg}/100;

fill vg => $e->target->{vg}, pg => 1;

size $e->misc->{amount};

if ($opt->{base}) {
  die "can't find base file: $opt->{base}\n" unless -f $opt->{base};
  do $opt->{base};
}

nic split ',', $opt->{nic} if $opt->{nic};
fill split ',', $opt->{fill} if $opt->{fill};

emitter $opt->{emitter} if $opt->{emitter};
size $opt->{size} if $opt->{size};

batch_generate;

__END__
