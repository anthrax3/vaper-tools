#!/usr/bin/env perl
use strict;
use warnings;

use FindBin;
use lib "$FindBin::RealBin/../lib";
use lib "$FindBin::RealBin/../local/lib/perl5";

use List::AllUtils qw( first );

use App::JuiceCalc::Simple;

=head1 NAME

=head1 VERSION

=cut

use Getopt::Long::Descriptive;
use Pod::Usage;
my ($opt, $usage) = describe_options(
  "%c %o <some-arg>",
  [ 'flavor|f=s', "the flavor file to mix" ],
  [ 'base|b=s',   "the base file to mix" ],
  [ 'nic=s',      "base override" ],
  [ 'fill=s',       "fill override" ],
  [ 'size|s=i',   "the amount to mix" ],
  [ 'formatter|fmt=s', "the formatter to use" ],
  [],
  [ 'list-formatters', "list the available formatters and exit" ],
  [ 'help|h',     "print usage and exit" ],
  [ 'man',        "print the manual page and exit" ],
  { getopt_conf => [ 'bundling_override' ] }
);
#use Data::Dump; dd [ opt => \%{ $opt } ];
print($usage->text), exit if $opt->{help};
pod2usage( -verbose => 2, -noperldoc => 1 ) if $opt->{man};

if ($opt->{list_formatters}) {
  my $info = list_emitters;
  for my $f (sort keys %$info) {
    print "\n";
    print "$info->{$f}{name}:\n";
    print "\t$info->{$f}{summary}\n" if $info->{$f}{summary};
    print "\t$info->{$f}{description}" if $info->{$f}{description};
    print "\n";
  }
  exit;
}

=head1 SYNOPSIS

=head1 OPTIONS AND ARGUMENTS

=cut

if ($opt->{flavor}) {
  die "Can't find flavor file: $opt->{flavor}\n" unless -f $opt->{flavor};
  do $opt->{flavor};
}
else {
  die "No flavor file given\n";
}

if ($opt->{base}) {
  die "Can't find base file: $opt->{base}\n" unless -f $opt->{base};
  do $opt->{base};
}

nic split ',', $opt->{nic} if $opt->{nic};
fill split ',', $opt->{fill} if $opt->{fill};

emitter $opt->{formatter} if $opt->{formatter};
size $opt->{size} if $opt->{size};

batch_generate;
